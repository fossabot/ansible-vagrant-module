---
# 
# This section fires up a set of guests dynamically using vagrant,
# registers it in the inventory under the group "vagrant_hosts"
# then logs in and pokes around.
# 
# Usage:
# ansible-playbook -i inventory/ansible/hosts vagrant-test.yaml

- hosts:
  - localhost
  connection: local
  gather_facts: False

  vars:
    ansible_python_interpreter: "/usr/bin/env python"
    box_name2: debian/buster64
    box_path2: https://app.vagrantup.com/debian/boxes/buster64/versions/10.20210409.1/providers/virtualbox.box
    # https://app.vagrantup.com/debian/boxes/buster64/versions/10.20210409.1/providers/libvirt.box
    vm_name2: frank

  tasks:
  - name: Fire up a set of vagrant instances to log into
    local_action: vagrant
    args:
      command: up
      box_name: "{{box_name2}}"
      box_path: "{{box_path2}}"
      vm_name: "{{vm_name2}}"
      count: 2
      config_code: |
        config.vm.provider "virtualbox" do |vb|
        vb.memory = 256
        end
      log: true
    register: vagrant
    
  - name: Remind us about the vagrant private key ...
    ansible.builtin.debug: 
      msg: "Be sure to add the ssh private key for vagrant, here ... '{{vagrant.instances[0].key}}'."
  
  - name: Host info ...
    ansible.builtin.debug:
      msg: '{{item.public_ip}}:{{item.port}}' 
    loop: '{{vagrant.instances}}'
      
  - name: Capture that hosts contact info into the inventory (the hostname is a unique ID from Vagrant ... )
    ansible.builtin.add_host: 
      groupname: vagrant_hosts
      hostname: '{{item.vagrant_name}}' 
      ansible_ssh_port: '{{item.port}}' 
      ansible_ssh_host: '{{item.public_ip}}'
      ansible_ssh_private_key_file: '{{item.key}}'
      ansible_ssh_args: ' -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ' # avoids ssh key storing and fixes warnings "sftp|scp transfer mechanism failed on [127.0.0.1]"
    loop: '{{vagrant.instances}}'    

# Run on the vagrant_hosts group, checking that we have basic ssh access...
- hosts:
  - vagrant_hosts
  user: vagrant
  vars:
    ansible_python_interpreter: "/usr/bin/env python"
    vm_name2: frank
  gather_facts: True
             
  tasks:
  
  - name: Lets see if we can login
    command: uname -a
    
  - name: Lets see all the ansible vars about vagrant hosts...
    setup:      
      
  - name: Generate a ./blah_ansible.vars to check for hostvars
    action: template src=test-vagrant-hostinfo.j2 dest=/tmp/localhost_ansible.vars
    
  - name: Take a look at the outputs ...  (Messy!)
    command: cat /tmp/localhost_ansible.vars
          
  - name: Shut them down ...
    local_action: 
      module: vagrant
      state: halt
      vm_name: '{{vm_name2}}'
                  
  - name: Now clear it out ...
    local_action: 
      module: vagrant 
      command: clear
